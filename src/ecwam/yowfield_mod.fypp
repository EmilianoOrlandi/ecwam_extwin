#:set objtypes = ['frequency', 'environment', 'forcing_fields', 'wave2ocean', 'intgt_param_fields']
#:set objdef = {'frequency': [('wavnum', 'real', 3), ('cinv', 'real', 3), ('cgroup', 'real', 3), ('xk2cg', 'real', 3), &
  &                        ('omosnh2kd', 'real', 3), ('stokfac', 'real', 3), ('ciwa', 'real', 3)]}
$:objdef.update({'environment': [('indep', 'int', 2), ('iodp', 'int', 2), ('iobnd', 'int', 2), ('dellam1', 'real', 2), &
  &  ('cosphm1', 'real', 2), ('depth', 'real', 2), ('emaxdpt', 'real', 2), ('ucur', 'real', 2), ('vcur', 'real', 2)]})
$:objdef.update({'forcing_fields': [('uwnd', 'real', 2), ('vwnd', 'real', 2), ('aird', 'real', 2), ('wstar', 'real', 2), ('cicover', 'real', 2), &
  &  ('cithick', 'real', 2), ('lkfr', 'real', 2), ('ucur', 'real', 2), ('vcur', 'real', 2), ('wswave', 'real', 2), ('wdwave', 'real', 2), &
  &  ('ufric', 'real', 2), ('tauw', 'real', 2), ('tauwdir', 'real', 2), ('z0m', 'real', 2), ('z0b', 'real', 2), ('chrnck', 'real', 2), &
  &  ('xlon', 'real', 2), ('ylat', 'real', 2)]})
$:objdef.update({'wave2ocean': [('nswh', 'real', 2), ('nmwp', 'real', 2), ('nphieps', 'real', 2), ('nemophif', 'real', 2), ('ntauoc', 'real', 2), &
  &  ('nemotaux', 'real', 2), ('nemotauy', 'real', 2), ('nemoustokes', 'real', 2), ('nemovstokes', 'real', 2), ('nemostrn', 'real', 2), &
  &  ('nemowswave', 'real', 2)]})
$:objdef.update({'intgt_param_fields': [('wsemean', 'real', 2), ('wsfmean', 'real', 2), ('ustokes', 'real', 2), ('vstokes', 'real', 2), &
  &  ('phieps', 'real', 2), ('phiocd', 'real', 2), ('phiaw', 'real', 2), ('tauoc', 'real', 2), ('tauxd', 'real', 2), ('tauyd', 'real', 2), &
  &  ('tauocxd', 'real', 2), ('tauocyd', 'real', 2), ('strnms', 'real', 2), ('altwh', 'real', 2), ('caltwh', 'real', 2), ('raltcor', 'real', 2)]})
#!
#!
MODULE YOWFIELD_MOD

   USE PARKIND_WAVE, ONLY : JWRB, JWIM
   USE FIELD_MODULE, ONLY : FIELD_3D_WRAPPER, FIELD_3D, FIELD_INT2D, FIELD_INT2D_WRAPPER, FIELD_2D, FIELD_2D_WRAPPER, &
 &                          FIELD_INT3D, FIELD_INT3D_WRAPPER
   IMPLICIT NONE

#:for obj in objtypes
   TYPE ${obj.upper()}$_FIELD
   #:for var, type, dim in objdef[obj]
          #{if type == 'real'}#REAL(KIND=JWRB)#{else}#INTEGER(KIND=JWIM)#{endif}#, DIMENSION(${','.join(':' for _ in range(dim-1))}$), POINTER :: ${var.upper()}$=>NULL()
   #:endfor
   #:for var, type, dim in objdef[obj]
          CLASS(FIELD_#{if type == 'int'}#INT#{endif}#${dim}$D), POINTER :: F_${var.upper()}$=>NULL()
   #:endfor
      CONTAINS
         PROCEDURE :: INIT => ${obj.upper()}$_FIELD_INIT
         PROCEDURE :: UPDATE_VIEW => ${obj.upper()}$_UPDATE_VIEW
         #!PROCEDURE :: FINAL => ${obj.upper()}$_FINAL
   END TYPE ${obj.upper()}$_FIELD

#:endfor
   CONTAINS
#:for type in ['real', 'int']
   #:for dim in range(2, 4)
      FUNCTION WRAP_${dim}$D_${type.upper()}$_FIELD(ARR) RESULT(FIELD)
        #{if type == 'real'}#REAL(KIND=JWRB)#{else}#INTEGER(KIND=JWIM)#{endif}#, DIMENSION(${','.join(':' for _ in range(dim))}$), INTENT(IN) :: ARR
         CLASS(FIELD_#{if type == 'int'}#INT#{endif}#${dim}$D_WRAPPER), POINTER :: FIELD

         ALLOCATE(FIELD)
         CALL FIELD%INIT(ARR)
      END FUNCTION WRAP_${dim}$D_${type.upper()}$_FIELD

   #:endfor
#:endfor
#:for obj in objtypes
      SUBROUTINE ${obj.upper()}$_FIELD_INIT(SELF, ${', '.join(var[0].upper() for var in objdef[obj])}$)
          CLASS(${obj.upper()}$_FIELD), INTENT(INOUT) :: SELF
      #:for var, type, dim in objdef[obj]
          #{if type == 'real'}#REAL(KIND=JWRB)#{else}#INTEGER(KIND=JWIM)#{endif}#, DIMENSION(${','.join(':' for _ in range(dim))}$), INTENT(IN), OPTIONAL :: ${var.upper()}$
      #:endfor

      #:for var, type, dim in objdef[obj]
          IF(PRESENT(${var.upper()}$)) SELF%F_${var.upper()}$ => WRAP_${dim}$D_${type.upper()}$_FIELD(${var.upper()}$)
      #:endfor
      END SUBROUTINE ${obj.upper()}$_FIELD_INIT
  
      SUBROUTINE ${obj.upper()}$_UPDATE_VIEW(SELF, BLOCK_INDEX)
          CLASS(${obj.upper()}$_FIELD), INTENT(INOUT) :: SELF
          INTEGER(KIND=JWIM), INTENT(IN) :: BLOCK_INDEX

      #:for var, type, dim in objdef[obj]
          IF(ASSOCIATED(SELF%F_${var.upper()}$)) SELF%${var.upper()}$ => SELF%F_${var.upper()}$%GET_VIEW(BLOCK_INDEX)
      #:endfor
      END SUBROUTINE ${obj.upper()}$_UPDATE_VIEW

#:endfor
END MODULE YOWFIELD_MOD
