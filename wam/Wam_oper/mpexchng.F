      SUBROUTINE MPEXCHNG(FLD,NDIM2,NDIM3)


!****  *MPEXCHNG* - EXHANGES MESSAGE BETWEEN THE PROCESS IRANK
!****               AND THE ALL PE's THAT CONTAINS INFORMATION NEEDED
!                   FOR THE ADVECTION OR THE CALCULATION OF THE
!                   CURRENT VELOCITY GRADIENT. 

!     J. BIDLOT    ECMWF   MARCH 1996  MESSAGE PASSING
!                  ECMWF   JANUARY 2004 MADE THE INTERFACE MORE GENERAL

!     PURPOSE.
!     --------
!     EXHANGE MESSAGE BETWEEN ONE PROCESS AND ITS NEIGHBOURS (HALO). 

!*    INTERFACE.
!     ----------
!     CALL *MPEXCHNG*(FLD,NDIM2,NDIM3)

!      *FLD*       ARRAY TO EXCHANGE 
!                  THE FIRST DIMENSION IS ALWAYS GIVEN AS NINF-1:NSUP
!                  BECAUSE OF THE HALO CONFIGURATION (SEE MPDECOMP)
!      *NDIM2*     SECOND DIMENSION OF FLD.
!      *NDIM3*     THIRD DIMENSION OF FLD.

!     METHOD.
!     -------

!     USING NON-BLOCKING SEND, YOU CAN FIRST SEND ALL MESSAGES THEN
!     COLLECT THEM ACCORDINGLY WITH A BLOCKING RECEIVE.


!     EXTERNALS.
!     ----------
!     MPL PACKAGE :
!         MPL_SEND
!         MPL_RECV
!         MPL_ABORT

!     REFERENCES.
!     -----------
!     CHAPTER 4 OF
!     USING MPI, PORTABLE PARALLEL PROGRAMMING WITH THE MESSAGE PASSING
!     INTERFACE. W.CROPP, E LUSK, A SKJELLUM. MIT PRESS 1995

! -------------------------------------------------------------------

      USE YOWMPP   , ONLY : IRANK    ,NPROC    ,NINF     ,NSUP     ,
     &          KTAG
      USE YOWSPEC, ONLY   : NTOPE    ,NTOPEMAX ,IJTOPE   ,NGBTOPE  , 
     &          NTOPELST   ,NFROMPE  ,NFROMPEMAX,NIJSTART,NGBFROMPE,
     &          NFROMPELST
      USE MPL_MODULE

!----------------------------------------------------------------------

      REAL,DIMENSION(NINF-1:NSUP,NDIM2,NDIM3) :: FLD

!----------------------------------------------------------------------

      INTEGER,DIMENSION(NGBTOPE) :: ISENDREQ,ISENDLEN

      REAL,ALLOCATABLE :: ZCOMBUFS(:,:)
      REAL,ALLOCATABLE :: ZCOMBUFR(:)
      LOGICAL :: LLOK

      IF(NPROC.LE.1) THEN
        RETURN
      ENDIF


      NBUFMAX=MAX(NTOPEMAX,NFROMPEMAX)*NDIM2*NDIM3
      ALLOCATE(ZCOMBUFS(NBUFMAX,NGBTOPE))
      ALLOCATE(ZCOMBUFR(NBUFMAX))


!     PACK SEND BUFFERS FOR NGBTOPE NEIGHBOURING PE's
!     -------------------------------------------------
      CALL GSTATS(1892,0)
      DO INGB=1,NGBTOPE
        IPROC=NTOPELST(INGB)
!       FILL THE SEND BUFFER
        KCOUNT=0
        DO M=1,NDIM3
          DO K=1,NDIM2
            DO IH=1,NTOPE(IPROC)
              IJ=IJTOPE(IH,IPROC)
              KCOUNT=KCOUNT+1
              ZCOMBUFS(KCOUNT,INGB)=FLD(IJ,K,M)
            ENDDO
          ENDDO
        ENDDO
        ISENDLEN(INGB)=KCOUNT
      ENDDO
      CALL GSTATS(1892,1)

!     SEND NON BLOCKING THE BUFFERS

      CALL GSTATS(676,0)
      DO INGB=1,NGBTOPE
        IPROC=NTOPELST(INGB)
        KCOUNT=ISENDLEN(INGB)
        CALL MPL_SEND(ZCOMBUFS(1:KCOUNT,INGB),KDEST=IPROC,KTAG=KTAG,
     &   KMP_TYPE=JP_NON_BLOCKING_STANDARD,KREQUEST=ISENDREQ(INGB),
     &   CDSTRING='MPEXCHNG:')

      ENDDO
      CALL GSTATS(676,1)


!     RECEIVE FROM THE NGBFROMPE NEIGHBOURING PE's
!     --------------------------------------------


      DO INGB=1,NGBFROMPE
        CALL GSTATS(676,0)
        CALL MPL_RECV(ZCOMBUFR(1:NBUFMAX),KTAG=KTAG,
     &    KRECVTAG=KRTAG,KFROM=KRFROM,CDSTRING='MPEXCHNG:')
        CALL GSTATS(676,1)
        IF(KRTAG.NE.KTAG) CALL MPL_ABORT
     &    ('MPL_RECV ERROR in MPEXCHNG: MISMATCHED TAGS' )

!!! this test may not be necessary but to start with is ok
!!        LLOK=.FALSE.
!!        DO KNGB=1,NGBFROMPE
!!          IF(KRFROM.EQ.NFROMPELST(KNGB)) THEN
!!           LLOK=.TRUE.
!!            EXIT
!!          ENDIF
!!        ENDDO
!!        IF(.NOT.LLOK) CALL MPL_ABORT
!!     &    ('MPL_RECV ERROR in MPEXCHNG: MESSAGE FROM A NON NEIGHBOUR !')
!!!

!       DECODE THE RECEIVED BUFFERS
        KCOUNT=0
        CALL GSTATS(1893,0)
        DO M=1,NDIM3
          DO K=1,NDIM2
            DO IH=1,NFROMPE(KRFROM)
              IJ=NIJSTART(KRFROM)+IH-1
              KCOUNT=KCOUNT+1
              FLD(IJ,K,M)=ZCOMBUFR(KCOUNT)
            ENDDO
          ENDDO
        ENDDO
        CALL GSTATS(1893,1)

      ENDDO

!     WAIT ANY OUTSTANDING SENDS TO COMPLETE
!     --------------------------------------

      CALL GSTATS(676,0)
      CALL MPL_WAIT(ZCOMBUFS(1:NBUFMAX,1),KREQUEST=ISENDREQ,
     &              CDSTRING='MPEXCHNG:')
      CALL GSTATS(676,1)

      KTAG=KTAG+1


      DEALLOCATE(ZCOMBUFS)
      DEALLOCATE(ZCOMBUFR)

      END SUBROUTINE MPEXCHNG
