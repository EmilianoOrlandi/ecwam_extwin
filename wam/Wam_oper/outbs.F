      SUBROUTINE OUTBS (IJSLOC, IJLLOC, IJ_OFFSET,
     &                  MIJ,
     &                  FL1, XLLWS,
     &                  INFOBOUT, BOUT,
     &                  IG, IU25, IU26, LLOUTBS)
! ----------------------------------------------------------------------

!**** *OUTBS* - MODEL OUTPUT FROM BLOCK TO FILE, PRINTER AND COMMON.

!     H. GUNTHER         GKSS/ECMWF         JUNE 1990
!     J. BIDLOT          ECMWF   FEBRUARY 1996 MESSAGE PASSING
!     D. PETTENUZZO      MAY 2012 ADDED 3 TRAIN DECOMPOSITION CALL

!*    PURPOSE.
!     --------

!       CONTROL OUTPUT OF WAVE AND WIND FIELDS.


!**   INTERFACE.
!     ----------
!      *CALL*OUTBS (IJSLOC, IJLLOC, IJ_OFFSET,
!     &             MIJ, FL1, XLLWS,
!     &             IG, IU25, IU26, LLOUTBS)
!      *IJSLOC* - INDEX OF FIRST LOCAL GRIDPOINT
!      *IJLLOC* - INDEX OF LAST LOCAL GRIDPOINT
!      *IJ_OFFSET* OFFSET to point IJSLOC and IJLLOC to the global block of data
!                   only meaningful if unstructured grid
!      *MIJ*    - LAST FREQUENCY INDEX OF THE PROGNOSTIC RANGE.
!      *FL1*    - INPUT SPECTRUM.
!      *XLLWS*  - WINDSEA MASK FROM INPUT SOURCE TERM
!      *IG*     - BLOCK NUMBER
!      *IU25*   - OUTPUT UNIT FOR SPECTRA.
!      *IU26*   - OUTPUT UNIT FOR SEA AND SWELL SPECTRA.
!      *LLOUTBS - TRUE WHEN ACCESSING OUTBS

!     EXTERNALS.
!     ----------

!       *FEMEAN*    - COMPUTATION OF MEAN FREQUENCY AT EACH GRID POINT.
!       *INTPOL*    - MAP SPECTRUM FROM SIGMA TO OMEGA SPACE.
!       *OUTERS*    - OUTPUT OF SATELLITE COLOCATION SPECTRA.
!       *OUTGRID*   - SAVE BLOCKED PARAMETERS INTO GRID ARRAYS.
!       *OUTSPP*    - OUTPUT OF SPECTRA AT SELECTED POINTS.
!       *SEMEAN*    - COMPUTATION OF TOTAL ENERGY AT EACH GRID POINT.
!       *SEPWISW*   - SEPARATION OF WINDSEA AND SWELL.
!       *SEP3TR*    - SEPARATION OF WAVE SPECTRA INTO 3 WAVE TRAINS
!       *STHQ*      - COMPUTATION OF MEAN WAVE DIRECTION AT EACH
!                     GRID POINT.
!       *MWP1*      - COMPUTATION OF MEAN PERIOD (1) AT EACH GRID POINT.
!       *MWP2*      - COMPUTATION OF MEAN PERIOD (2) AT EACH GRID POINT.
!       *WDIRSPREAD*- COMPUTATION OF MEAN DIRECTIONAL SPREAD AT EACH 
!                     GRID POINT. 
!       *KURTOSIS*  - COMPUTATION OF THE SURFACE ELEVATION KURTOSIS, 
!                     THE BEJAMIN-FEIR INDEX, THE SPECTRAL PEAKEDNESS 
!                     FACTOR AND THE MAXIMUM WAVE HEIGHT.
!       *STOKESDRIFT*  - COMPUTATION OF THE STOKES DRIFT VECTOR. 
!   
!     METHOD.
!     -------

!       NONE.

!     REFERENCE.
!     ----------

!       NONE.

! ----------------------------------------------------------------------
      USE YOWCOUT  , ONLY : NTRAIN   ,JPPFLAG  ,IPFGTBL  ,LSECONDORDER,
     &            NIPRMOUT, ITOBOUT
      USE YOWCURR  , ONLY : U, V
      USE YOWFRED  , ONLY : DFIM     ,DELTH    ,COSTH    ,SINTH
      USE YOWICE   , ONLY : CICOVER  ,CITHICK
      USE YOWINTP  , ONLY : WHGTTG   ,WDIRTG   ,WPKFTG   ,WMNFTG   ,
     &            USTARG   ,UDIRG    ,TAUWG    ,CDG      ,SMEANG   ,
     &            U10G     ,WHGTAG   ,CWHTAG   ,RANGAG   ,MWP1G    ,
     &            MWP2G    ,WSPRDG   ,C3G      ,C4G      ,BFG      ,
     &            QPG      ,
     &            DEPTHG   ,HMAXG    ,TMAXG    ,USTOKESG ,VSTOKESG ,
     &            UCURG    ,VCURG    ,PHIEPSG  ,PHIAWG   ,TAUOCG   ,
     &            STRNMSG  ,RHOAG    ,WSTARG   ,CICG     ,CIHG     ,
     &            E10G     ,
     &            NSSTG    ,NICCG    ,NICTG    ,NUCUG    ,NVCUG    ,
     &            WEFLXMG  ,WEFLXDG  ,E1012G   , 
     &            E1214G   ,E1417G   ,E1721G   ,E2125G   ,E2530G   ,
     &            WX1G     ,WX2G     ,WX3G     ,WX4G     ,WX5G
      USE YOWINTS  , ONLY : WHGTSG   ,WDIRSG   ,WMNFSG   ,WHGTWG   ,
     &            WDIRWG   ,WMNFWG   ,MWP1SG   ,MWP2SG   ,WSPRDSG  ,
     &            MWP1WG   ,MWP2WG   ,WSPRDWG
      USE YOWINTT  , ONLY : WHGTTRG  ,WDIRTRG  ,MWPMTRG

      USE YOWMEAN  , ONLY : ALTWH    ,CALTWH   ,RALTCOR  ,              &
     &            PHIEPS   ,PHIAW    ,TAUOC

      USE YOWMPP   , ONLY : NPROC
      USE YOWNEMOFLDS,ONLY: NEMOSST, NEMOCICOVER, NEMOCITHICK,          &
     &                      NEMOUCUR, NEMOVCUR, LNEMOCITHICK
      USE YOWSPEC  , ONLY : TAUW     ,U10NEW   ,THWNEW   ,USNEW    ,    &
     &            ROAIRN   ,ZIDLNEW
      USE YOWPARAM , ONLY : NGX      ,NGY      ,NANG     ,NFRE
      USE YOWPCONS , ONLY : ZMISS    ,DEG
      USE YOWSHAL, ONLY: NDEPTH      ,DEPTH       ,INDEP    ,IODP  ,
     &            TCGOND
      USE YOWSTAT  , ONLY : CDATEA   ,CDTPRO   ,CDTINTS  ,CDTSPT   ,
     &            CDTSPS   ,MARSTYPE ,NPROMA_WAM,IREFRA

      USE YOWTEST  , ONLY : IU06     ,ITEST    ,ITESTB
      USE MPL_MODULE
      USE YOMHOOK  , ONLY : LHOOK,   DR_HOOK

! ----------------------------------------------------------------------

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: IJSLOC, IJLLOC
      INTEGER, INTENT(IN) :: IJ_OFFSET
      INTEGER, INTENT(IN) :: IG
      INTEGER, INTENT(IN) :: IU25, IU26 
      INTEGER, DIMENSION(IJSLOC:IJLLOC), INTENT(IN) :: MIJ

      REAL, DIMENSION(NIPRMOUT), INTENT(OUT) :: INFOBOUT
      REAL, DIMENSION(IJSLOC:IJLLOC,NANG,NFRE), INTENT(IN) :: FL1
      REAL, DIMENSION(IJSLOC:IJLLOC,NANG,NFRE), INTENT(IN) :: XLLWS 
      REAL, DIMENSION(IJSLOC:IJLLOC,NIPRMOUT), INTENT(OUT) :: BOUT

      LOGICAL, INTENT(OUT) :: LLOUTBS


      INTEGER :: ITT, ITG, ICT, IR, ITR
      INTEGER :: IJ, K, M 
      INTEGER :: IRA
      INTEGER :: JKGLO, KIJS, KIJL, NPROMA

      REAL :: SIG
      REAL :: TAU
      REAL :: ZHOOK_HANDLE
      REAL, DIMENSION(IJSLOC:IJLLOC) :: EM, FM
      REAL, DIMENSION(IJSLOC:IJLLOC) :: C3, C4, BF, QP, FP, HMAX, TMAX
      REAL, DIMENSION(IJSLOC:IJLLOC) :: UST, VST
      REAL, DIMENSION(IJSLOC:IJLLOC) :: ESWELL ,FSWELL ,THSWELL
      REAL, DIMENSION(IJSLOC:IJLLOC) :: P1SWELL,P2SWELL,SPRDSWELL
      REAL, DIMENSION(IJSLOC:IJLLOC) :: ESEA   ,FSEA   ,THWISEA
      REAL, DIMENSION(IJSLOC:IJLLOC) :: P1SEA  ,P2SEA  ,SPRDSEA
      REAL, DIMENSION(IJSLOC:IJLLOC) :: E10
      REAL, DIMENSION(IJSLOC:IJLLOC,NTRAIN) :: EMTRAIN
      REAL, DIMENSION(IJSLOC:IJLLOC,NTRAIN) :: THTRAIN, PMTRAIN


!     *FL3*  SPECTRUM with second order effect added if LSECONDORDER is true .
!            and in the absolute frame of reference if currents are used 
      REAL, DIMENSION(IJSLOC:IJLLOC,NANG,NFRE) :: FL3

      LOGICAL :: LLPEAKF

!     LOGICAL FUNCTION
      LOGICAL :: LLALLOC_GRDFLD
      
! ----------------------------------------------------------------------

#ifdef ECMWF
      IF (LHOOK) CALL DR_HOOK('OUTBS',0,ZHOOK_HANDLE)
#endif
!
!*    1. COMPUTE MEAN PARAMETERS.
!        ------------------------

      LLOUTBS=.TRUE.

      NPROMA=NPROMA_WAM

      CALL GSTATS(1502,0)

!     PREPARE THE WAVE SPECTRA THAt SHOULD BE USED FOR OUTPUT

      LLPEAKF = .FALSE.
      IRA=1
      SIG = +1.

!$OMP PARALLEL DO SCHEDULE(DYNAMIC,1) PRIVATE(JKGLO,KIJS,KIJL,M,K,IJ)
      DO JKGLO=IJSLOC,IJLLOC,NPROMA
        KIJS=JKGLO
        KIJL=MIN(KIJS+NPROMA-1,IJLLOC)

        IF (IREFRA.EQ.2 .OR. IREFRA.EQ.3) THEN
          CALL INTPOL (FL1(KIJS:KIJL,:,:), FL3(KIJS:KIJL,:,:),          &
     &                 KIJS, KIJL, IG, IRA)
        ELSE
          DO M=1,NFRE
            DO K=1,NANG
              DO IJ=KIJS,KIJL
                FL3(IJ,K,M) = FL1(IJ,K,M)
              ENDDO
            ENDDO
          ENDDO
        ENDIF
        IF(LSECONDORDER) THEN
          CALL CAL_SECOND_ORDER_SPEC(FL3(KIJS:KIJL,:,:),                &
     &                               KIJS,KIJL,                         &
     &                               DEPTH(KIJS:KIJL,IG),               &
     &                               SIG)
        ENDIF
      ENDDO
!$OMP   END PARALLEL DO



!     COMPUTE MEAN PARAMETERS

!$OMP PARALLEL DO SCHEDULE(DYNAMIC,1) PRIVATE(JKGLO,KIJS,KIJL,IJ,IR,ITG)
      DO JKGLO=IJSLOC,IJLLOC,NPROMA
        KIJS=JKGLO
        KIJL=MIN(KIJS+NPROMA-1,IJLLOC)

        CALL FEMEAN (FL3(KIJS:KIJL,:,:), KIJS, KIJL,EM(KIJS), FM(KIJS))

        CALL KURTOSIS(FL3(KIJS:KIJL,:,:),KIJS,KIJL,IG,                  &
     &                C3(KIJS),C4(KIJS),BF(KIJS),                       &
     &                QP(KIJS),FP(KIJS),HMAX(KIJS),                     &
     &                TMAX(KIJS))

!       WIND/SWELL:
        CALL SEPWISW (KIJS, KIJL, MIJ(KIJS),
     &                FL3(KIJS:KIJL,:,:), XLLWS(KIJS:KIJL,:,:),
     &                USNEW(KIJS), U10NEW(KIJS), THWNEW(KIJS),
     &                ESWELL(KIJS)   ,FSWELL(KIJS)   ,THSWELL(KIJS)  ,
     &                P1SWELL(KIJS)  ,P2SWELL(KIJS)  ,SPRDSWELL(KIJS),
     &                ESEA(KIJS)     ,FSEA(KIJS)     ,THWISEA(KIJS)  ,
     &                P1SEA(KIJS)    ,P2SEA(KIJS)    ,SPRDSEA(KIJS)  ,
     &                EMTRAIN(KIJS:KIJL,:),
     &                THTRAIN(KIJS:KIJL,:),PMTRAIN(KIJS:KIJL,:))

!       STOKES DRIFT
!!!!!!!! the second order correction should not apply to the Stokes drift
        CALL STOKESDRIFT(FL1(KIJS:KIJL,:,:), KIJS, KIJL,                &
     &                   UST(KIJS), VST(KIJS))


        IR=0
!       LOAD THE OUTPUT BUFFER:

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
!         SIGNIFICANT WAVE HEIGHT CONVERSION
          BOUT(KIJS:KIJL,ITOBOUT(IR))=4.*SQRT(MAX(EM(KIJS:KIJL),0.))
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          ITG=ITOBOUT(IR)
          CALL STHQ (FL3(KIJS:KIJL,:,:),KIJS,KIJL,BOUT(KIJS,ITG))
!         CONVERT DIRECTIONS TO DEGREES AND METEOROLOGICAL CONVENTION
          BOUT(KIJS:KIJL,ITG)=MOD(DEG*BOUT(KIJS:KIJL,ITG)+180.,360.)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
!         CONVERSION TO PERIOD
          BOUT(KIJS:KIJL,ITOBOUT(IR))=1./FM(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=USNEW(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
!        CONVERT DIRECTIONS TO DEGREES AND METEOROLOGICAL CONVENTION
        BOUT(KIJS:KIJL,ITOBOUT(IR))=MOD(DEG*THWNEW(KIJS:KIJL)+180.,360.)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
!         CONVERSION TO PERIOD
          BOUT(KIJS:KIJL,ITOBOUT(IR))=1./FP(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
!!       if the numerical computation of TAU and CD change, a similar
!!       modification has to be put in buildstress where the friction
!!       velocity is determined from U10 and CD.
          BOUT(KIJS:KIJL,ITOBOUT(IR))=
     &   MAX(USNEW(KIJS:KIJL)**2,EPSUS)/MAX(U10NEW(KIJS:KIJL)**2,EPSU10)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=                                  &
     &     TAUW(KIJS:KIJL,IG)/MAX(USNEW(KIJS:KIJL)**2,EPSUS)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          CALL MEANSQS (FL3(KIJS:KIJL,:,:),KIJS,KIJL,
     &                  USNEW(KIJS),FM(KIJS),BOUT(KIJS,ITOBOUT(IR)))
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=U10NEW(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
!         WINDSEA SIGNIFICANT WAVE HEIGHT CONVERSION
          BOUT(KIJS:KIJL,ITOBOUT(IR))=4.*SQRT(MAX(ESEA(KIJS:KIJL),0.))
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
!         TOTAL SWELL SIGNIFICANT WAVE HEIGHT CONVERSION
          BOUT(KIJS:KIJL,ITOBOUT(IR))=4.*SQRT(MAX(ESWELL(KIJS:KIJL),0.))
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
!         CONVERT DIRECTIONS TO DEGREES AND METEOROLOGICAL CONVENTION
          BOUT(KIJS:KIJL,ITOBOUT(IR))=                                  &
     &        MOD(DEG*THWISEA(KIJS:KIJL)+180.,360.)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
!         CONVERT DIRECTIONS TO DEGREES AND METEOROLOGICAL CONVENTION
          BOUT(KIJS:KIJL,ITOBOUT(IR))=                                  &
     &        MOD(DEG*THSWELL(KIJS:KIJL)+180.,360.)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
!         CONVERSION TO PERIOD
          BOUT(KIJS:KIJL,ITOBOUT(IR))=1./FSEA(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
!         CONVERSION TO PERIOD
          BOUT(KIJS:KIJL,ITOBOUT(IR))=1./FSWELL(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          IF(.NOT.ALLOCATED(ALTWH)) THEN
            BOUT(KIJS:KIJL,ITOBOUT(IR))=ZMISS
          ELSE
            BOUT(KIJS:KIJL,ITOBOUT(IR))=ALTWH(KIJS:KIJL)
          ENDIF
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          IF(.NOT.ALLOCATED(CALTWH)) THEN
            BOUT(KIJS:KIJL,ITOBOUT(IR))=ZMISS
          ELSE
            BOUT(KIJS:KIJL,ITOBOUT(IR))=CALTWH(KIJS:KIJL)
          ENDIF
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          IF(.NOT.ALLOCATED(RALTCOR)) THEN
            BOUT(KIJS:KIJL,ITOBOUT(IR))=ZMISS
          ELSE
            BOUT(KIJS:KIJL,ITOBOUT(IR))=RALTCOR(KIJS:KIJL)
          ENDIF
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          CALL MWP1 (FL3(KIJS:KIJL,:,:), KIJS, KIJL,                    &
     &               EM(KIJS),BOUT(KIJS,ITOBOUT(IR)))
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          CALL MWP2 (FL3(KIJS:KIJL,:,:), KIJS, KIJL,                    &
     &               EM(KIJS),BOUT(KIJS,ITOBOUT(IR)))
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          CALL WDIRSPREAD (FL3(KIJS:KIJL,:,:),KIJS, KIJL,               &
     &                     LLPEAKF, BOUT(KIJS,ITOBOUT(IR)))
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=P1SEA(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=P1SWELL(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=P2SEA(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=P2SWELL(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=SPRDSEA(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=SPRDSWELL(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=C4(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=BF(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=QP(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=DEPTH(KIJS:KIJL,IG)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=HMAX(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=TMAX(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=UST(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=VST(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          IF(.NOT.ALLOCATED(U)) THEN
            BOUT(KIJS:KIJL,ITOBOUT(IR))=0.
          ELSE
            BOUT(KIJS:KIJL,ITOBOUT(IR))=U(KIJS:KIJL,IG)
          ENDIF
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          IF(.NOT.ALLOCATED(V)) THEN
            BOUT(KIJS:KIJL,ITOBOUT(IR))=0.
          ELSE
            BOUT(KIJS:KIJL,ITOBOUT(IR))=V(KIJS:KIJL,IG)
          ENDIF
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=PHIEPS(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=PHIAW(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=TAUOC(KIJS:KIJL)
        ENDIF

        DO ITR=1,NTRAIN
          IR=IR+1
          IF(IPFGTBL(IR).NE.0) THEN
            BOUT(KIJS:KIJL,ITOBOUT(IR))=4.*SQRT(MAX(EMTRAIN(KIJS:KIJL,ITR),0.))
          ENDIF

          IR=IR+1
          IF(IPFGTBL(IR).NE.0) THEN
            BOUT(KIJS:KIJL,ITOBOUT(IR))=MOD(DEG*THTRAIN(KIJS:KIJL,ITR)+180.,360.)
          ENDIF

          IR=IR+1
          IF(IPFGTBL(IR).NE.0) THEN
            BOUT(KIJS:KIJL,ITOBOUT(IR))=PMTRAIN(KIJS:KIJL,ITR)
          ENDIF
        ENDDO

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          CALL CIMSSTRN (FL3(KIJS:KIJL,:,:),KIJS,KIJL,BOUT(KIJS,ITOBOUT(IR)))
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          CALL SE10MEAN (FL3(KIJS:KIJL,:,:),KIJS,KIJL,E10(KIJS))
          BOUT(KIJS:KIJL,ITOBOUT(IR))=4.*SQRT(MAX(E10(KIJS:KIJL),0.))
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=ROAIRN(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=ZIDLNEW(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=CICOVER(KIJS:KIJL,IG)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=CITHICK(KIJS:KIJL,IG)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=C3(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=NEMOSST(KIJS:KIJL)
        ENDIF

        IR=IR+1
        IF(IPFGTBL(IR).NE.0) THEN
          BOUT(KIJS:KIJL,ITOBOUT(IR))=NEMOCICOVER(KIJS:KIJL)
        ENDIF


        ITG=ITG+1
        IF(IPFGTBL(ITG).NE.0 .OR. IPFGTBL(ITG+1).NE.0) THEN
           CALL WEFLUX (FL3(KIJS:KIJL,:,:), KIJS, KIJL,
     &                  NFRE, NANG, DFIM, DELTH,
     &                  COSTH, SINTH, NDEPTH, INDEP(KIJS), TCGOND,
     &                  WEFLXM(KIJS), WEFLXD(KIJS))
        ENDIF
        ITG=ITG+1

        ITG=ITG+1
        IF(IPFGTBL(ITG).NE.0) THEN
        CALL SEBTMEAN (FL3(KIJS:KIJL,:,:),KIJS,KIJL,10.,12.,E1012(KIJS))
        ENDIF

        ITG=ITG+1
        IF(IPFGTBL(ITG).NE.0) THEN
        CALL SEBTMEAN (FL3(KIJS:KIJL,:,:),KIJS,KIJL,12.,14.,E1214(KIJS))
        ENDIF

        ITG=ITG+1
        IF(IPFGTBL(ITG).NE.0) THEN
        CALL SEBTMEAN (FL3(KIJS:KIJL,:,:),KIJS,KIJL,14.,17.,E1417(KIJS))
        ENDIF

        ITG=ITG+1
        IF(IPFGTBL(ITG).NE.0) THEN
        CALL SEBTMEAN (FL3(KIJS:KIJL,:,:),KIJS,KIJL,17.,21.,E1721(KIJS))
        ENDIF

        ITG=ITG+1
        IF(IPFGTBL(ITG).NE.0) THEN
        CALL SEBTMEAN (FL3(KIJS:KIJL,:,:),KIJS,KIJL,21.,25.,E2125(KIJS))
        ENDIF

        ITG=ITG+1
        IF(IPFGTBL(ITG).NE.0) THEN
        CALL SEBTMEAN (FL3(KIJS:KIJL,:,:),KIJS,KIJL,25.,30.,E2530(KIJS))
        ENDIF


!       COMPUTE OUTPUT EXTRA FIELDS
!       add necessary code to compute the extra output fields
        IF(IPFGTBL(JPPFLAG-4).NE.0) THEN
          WX1(KIJS:KIJL)=1.0
        ENDIF
        IF(IPFGTBL(JPPFLAG-3).NE.0) THEN
          WX2(KIJS:KIJL)=2.0
        ENDIF
        IF(IPFGTBL(JPPFLAG-2).NE.0) THEN
          WX3(KIJS:KIJL)=3.0
        ENDIF
        IF(IPFGTBL(JPPFLAG-1).NE.0) THEN
          WX4(KIJS:KIJL)=4.0
        ENDIF
        IF(IPFGTBL(JPPFLAG).NE.0) THEN
          WX5(KIJS:KIJL)=5.0
        ENDIF

!!!???debile
        CALL OUTSETWMASK (KIJS, KIJL, IODP(KIJS), BOUT(KIJS,:))

      ENDDO
!$OMP END PARALLEL DO
      CALL GSTATS(1502,1)

      IF (ITEST.GE.3) THEN
        IF (ITESTB.GE.IG) THEN
          WRITE(IU06,*) '      SUB. OUTBS: INTEGRATED',
     &     ' PARAMETERS COMPUTED FOR OUTPUT'
        ENDIF
      ENDIF


      CALL GSTATS(719,0)
      CALL MPL_BARRIER(CDSTRING='OUTBS:')
      CALL GSTATS(719,1)

!*    4. OUTPUT OF SPECTRA AT SELECTED GRID POINTS.
!        ------------------------------------------

      IF (CDTSPT.EQ.CDTPRO .OR. CDTSPS.EQ.CDTPRO) THEN
        CALL OUTSPP (FL3, IJSLOC, IJLLOC, IJ_OFFSET, IG, IU25, IU26)
        IF (ITEST.GE.3) THEN
          IF (ITESTB.GE.IG) THEN
            WRITE(IU06,*) '      SUB. OUTBS: OUTPUT OF SPECTRA',
     &       ' AT SELECTED POINTS DONE'
          ENDIF
        ENDIF
      ENDIF


!*    5. TRANSFER OF INTEGRATED PARAMETERS TO GRID ARRAYS.
!        -------------------------------------------------

!     ALLOCATE ARRAYS

      IF(IPFGTBL(1).NE.0) THEN
        IF(.NOT.ALLOCATED(WHGTTG)) THEN
          IF(LLALLOC_GRDFLD(1)) ALLOCATE(WHGTTG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(2).NE.0) THEN
        IF(.NOT.ALLOCATED(WDIRTG)) THEN
          IF(LLALLOC_GRDFLD(2)) ALLOCATE(WDIRTG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(3).NE.0) THEN
        IF(.NOT.ALLOCATED(WMNFTG)) THEN
          IF(LLALLOC_GRDFLD(3)) ALLOCATE(WMNFTG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(4).NE.0) THEN
        IF(.NOT.ALLOCATED(USTARG)) THEN
          IF(LLALLOC_GRDFLD(4)) ALLOCATE(USTARG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(5).NE.0) THEN
        IF(.NOT.ALLOCATED(UDIRG)) THEN
          IF(LLALLOC_GRDFLD(5))  ALLOCATE(UDIRG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(6).NE.0) THEN
        IF(.NOT.ALLOCATED(WPKFTG)) THEN
          IF(LLALLOC_GRDFLD(6)) ALLOCATE(WPKFTG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(7).NE.0) THEN
        IF(.NOT.ALLOCATED(CDG)) THEN
          IF(LLALLOC_GRDFLD(7)) ALLOCATE(CDG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(8).NE.0) THEN
        IF(.NOT.ALLOCATED(TAUWG)) THEN
          IF(LLALLOC_GRDFLD(8)) ALLOCATE(TAUWG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(9).NE.0) THEN
        IF(.NOT.ALLOCATED(SMEANG)) THEN
          IF(LLALLOC_GRDFLD(9)) ALLOCATE(SMEANG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(10).NE.0) THEN
        IF(.NOT.ALLOCATED(U10G)) THEN
          IF(LLALLOC_GRDFLD(10)) ALLOCATE(U10G(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(11).NE.0) THEN
        IF(.NOT.ALLOCATED(WHGTWG)) THEN
          IF(LLALLOC_GRDFLD(11)) ALLOCATE(WHGTWG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(12).NE.0) THEN
        IF(.NOT.ALLOCATED(WHGTSG)) THEN
          IF(LLALLOC_GRDFLD(12)) ALLOCATE(WHGTSG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(13).NE.0) THEN
        IF(.NOT.ALLOCATED(WDIRWG)) THEN
          IF(LLALLOC_GRDFLD(13)) ALLOCATE(WDIRWG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(14).NE.0) THEN
        IF(.NOT.ALLOCATED(WDIRSG)) THEN
          IF(LLALLOC_GRDFLD(14)) ALLOCATE(WDIRSG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(15).NE.0) THEN
        IF(.NOT.ALLOCATED(WMNFWG)) THEN
          IF(LLALLOC_GRDFLD(15)) ALLOCATE(WMNFWG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(16).NE.0) THEN
        IF(.NOT.ALLOCATED(WMNFSG)) THEN
          IF(LLALLOC_GRDFLD(16)) ALLOCATE(WMNFSG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(17).NE.0) THEN
        IF(.NOT.ALLOCATED(WHGTAG)) THEN
          IF(LLALLOC_GRDFLD(17)) THEN
            ALLOCATE(WHGTAG(NGX,NGY))
            WHGTAG=ZMISS
          ENDIF
        ENDIF
      ENDIF
      IF(IPFGTBL(18).NE.0) THEN
        IF(.NOT.ALLOCATED(CWHTAG)) THEN
          IF(LLALLOC_GRDFLD(18)) THEN
            ALLOCATE(CWHTAG(NGX,NGY))
            CWHTAG=ZMISS
          ENDIF
        ENDIF
      ENDIF
      IF(IPFGTBL(19).NE.0) THEN
        IF(.NOT.ALLOCATED(RANGAG)) THEN
          IF(LLALLOC_GRDFLD(19)) THEN
            ALLOCATE(RANGAG(NGX,NGY))
            RANGAG=ZMISS
          ENDIF
        ENDIF
      ENDIF
      IF(IPFGTBL(20).NE.0) THEN
        IF(.NOT.ALLOCATED(MWP1G)) THEN
          IF(LLALLOC_GRDFLD(20)) ALLOCATE(MWP1G(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(26).NE.0) THEN
        IF(.NOT.ALLOCATED(MWP2G)) THEN
          IF(LLALLOC_GRDFLD(26)) ALLOCATE(MWP2G(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(27).NE.0) THEN
        IF(.NOT.ALLOCATED(WSPRDG)) THEN
          IF(LLALLOC_GRDFLD(27)) ALLOCATE(WSPRDG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(28).NE.0) THEN
        IF(.NOT.ALLOCATED(MWP1WG)) THEN
          IF(LLALLOC_GRDFLD(28)) ALLOCATE(MWP1WG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(29).NE.0) THEN
        IF(.NOT.ALLOCATED(MWP1SG)) THEN
          IF(LLALLOC_GRDFLD(29)) ALLOCATE(MWP1SG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(30).NE.0) THEN
        IF(.NOT.ALLOCATED(MWP2WG)) THEN
          IF(LLALLOC_GRDFLD(30)) ALLOCATE(MWP2WG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(31).NE.0) THEN
        IF(.NOT.ALLOCATED(MWP2SG)) THEN
          IF(LLALLOC_GRDFLD(31)) ALLOCATE(MWP2SG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(32).NE.0) THEN
        IF(.NOT.ALLOCATED(WSPRDWG)) THEN
          IF(LLALLOC_GRDFLD(32)) ALLOCATE(WSPRDWG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(33).NE.0) THEN
        IF(.NOT.ALLOCATED(WSPRDSG)) THEN
          IF(LLALLOC_GRDFLD(33)) ALLOCATE(WSPRDSG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(34).NE.0) THEN
        IF(.NOT.ALLOCATED(C4G)) THEN
          IF(LLALLOC_GRDFLD(34)) ALLOCATE(C4G(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(35).NE.0) THEN
        IF(.NOT.ALLOCATED(BFG)) THEN
          IF(LLALLOC_GRDFLD(35)) ALLOCATE(BFG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(36).NE.0) THEN
        IF(.NOT.ALLOCATED(QPG)) THEN
          IF(LLALLOC_GRDFLD(36)) ALLOCATE(QPG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(37).NE.0) THEN
        IF(.NOT.ALLOCATED(DEPTHG)) THEN
          IF(LLALLOC_GRDFLD(37)) ALLOCATE(DEPTHG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(38).NE.0) THEN
        IF(.NOT.ALLOCATED(HMAXG)) THEN
          IF(LLALLOC_GRDFLD(38)) ALLOCATE(HMAXG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(39).NE.0) THEN
        IF(.NOT.ALLOCATED(TMAXG)) THEN
          IF(LLALLOC_GRDFLD(39)) ALLOCATE(TMAXG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(40).NE.0 .OR. IPFGTBL(41).NE.0 ) THEN
        IF(.NOT.ALLOCATED(USTOKESG)) THEN
          IF(LLALLOC_GRDFLD(40)) ALLOCATE(USTOKESG(NGX,NGY))
        ENDIF
        IF(.NOT.ALLOCATED(VSTOKESG)) THEN
          IF(LLALLOC_GRDFLD(41)) ALLOCATE(VSTOKESG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(42).NE.0 .OR. IPFGTBL(43).NE.0 ) THEN
        IF(.NOT.ALLOCATED(UCURG)) THEN
          IF(LLALLOC_GRDFLD(42)) ALLOCATE(UCURG(NGX,NGY))
        ENDIF
        IF(.NOT.ALLOCATED(VCURG)) THEN
          IF(LLALLOC_GRDFLD(43)) ALLOCATE(VCURG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(44).NE.0) THEN
        IF(.NOT.ALLOCATED(PHIEPSG)) THEN
          IF(LLALLOC_GRDFLD(44)) ALLOCATE(PHIEPSG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(45).NE.0) THEN
        IF(.NOT.ALLOCATED(PHIAWG)) THEN
          IF(LLALLOC_GRDFLD(45)) ALLOCATE(PHIAWG(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(46).NE.0) THEN
        IF(.NOT.ALLOCATED(TAUOCG)) THEN
          IF(LLALLOC_GRDFLD(46)) ALLOCATE(TAUOCG(NGX,NGY))
        ENDIF
      ENDIF
      ICT=46
      DO ITT=1,NTRAIN
        ICT=ICT+1
        IF(IPFGTBL(ICT).NE.0) THEN
          IF(.NOT.ALLOCATED(WHGTTRG)) THEN
            IF(LLALLOC_GRDFLD(ICT)) ALLOCATE(WHGTTRG(NGX,NGY,NTRAIN))
          ENDIF
        ENDIF
        ICT=ICT+1
        IF(IPFGTBL(ICT).NE.0) THEN
          IF(.NOT.ALLOCATED(WDIRTRG)) THEN
            IF(LLALLOC_GRDFLD(ICT)) ALLOCATE(WDIRTRG(NGX,NGY,NTRAIN))
          ENDIF
        ENDIF
        ICT=ICT+1
        IF(IPFGTBL(ICT).NE.0) THEN
          IF(.NOT.ALLOCATED(MWPMTRG)) THEN
            IF(LLALLOC_GRDFLD(ICT)) ALLOCATE(MWPMTRG(NGX,NGY,NTRAIN))
          ENDIF
        ENDIF
      ENDDO

      ITG=46+3*NTRAIN+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(STRNMSG)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(STRNMSG(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(E10G)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(E10G(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(RHOAG)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(RHOAG(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(WSTARG)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(WSTARG(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(CICG)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(CICG(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(CIHG)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(CIHG(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(C3G)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(C3G(NGX,NGY))
        ENDIF
      ENDIF

      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(NSSTG)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(NSSTG(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(NICCG)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(NICCG(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(NICTG)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(NICTG(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(NUCUG)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(NUCUG(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(NVCUG)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(NVCUG(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(WEFLXMG)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(WEFLXMG(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(WEFLXDG)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(WEFLXDG(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(E1012G)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(E1012G(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(E1214G)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(E1214G(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(E1417G)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(E1417G(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(E1721G)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(E1721G(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(E2125G)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(E2125G(NGX,NGY))
        ENDIF
      ENDIF
      ITG=ITG+1
      IF(IPFGTBL(ITG).NE.0) THEN
        IF(.NOT.ALLOCATED(E2530G)) THEN
          IF(LLALLOC_GRDFLD(ITG)) ALLOCATE(E2530G(NGX,NGY))
        ENDIF
      ENDIF


      IF(IPFGTBL(JPPFLAG-4).NE.0) THEN
        IF(.NOT.ALLOCATED(WX1G)) THEN
          IF(LLALLOC_GRDFLD(JPPFLAG-4)) ALLOCATE(WX1G(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(JPPFLAG-3).NE.0) THEN
        IF(.NOT.ALLOCATED(WX2G)) THEN
          IF(LLALLOC_GRDFLD(JPPFLAG-3)) ALLOCATE(WX2G(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(JPPFLAG-2).NE.0) THEN
        IF(.NOT.ALLOCATED(WX3G)) THEN
          IF(LLALLOC_GRDFLD(JPPFLAG-2)) ALLOCATE(WX3G(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(JPPFLAG-1).NE.0) THEN
        IF(.NOT.ALLOCATED(WX4G)) THEN
          IF(LLALLOC_GRDFLD(JPPFLAG-1)) ALLOCATE(WX4G(NGX,NGY))
        ENDIF
      ENDIF
      IF(IPFGTBL(JPPFLAG).NE.0) THEN
        IF(.NOT.ALLOCATED(WX5G)) THEN
          IF(LLALLOC_GRDFLD(JPPFLAG)) ALLOCATE(WX5G(NGX,NGY))
        ENDIF
      ENDIF


      CALL OUTGRID (IJSLOC, IJLLOC, IJ_OFFSET, BOUT)


      IF (ITEST.GE.3) THEN
        IF (ITESTB.GE.IG) THEN
          WRITE(IU06,*) '      SUB. OUTBS: OUTPUT OF ',
     &     'INTEGRATED PARAMETERS DONE'
          CALL FLUSH(IU06)
        ENDIF
      ENDIF

      IF(ALLOCATED(CDMEAN)) DEALLOCATE(CDMEAN)
      IF(ALLOCATED(WVSTRMEAN)) DEALLOCATE(WVSTRMEAN)
      IF(ALLOCATED(FPMEAN)) DEALLOCATE(FPMEAN)
      IF(ALLOCATED(SMEAN)) DEALLOCATE(SMEAN)
      IF(ALLOCATED(P1MEAN)) DEALLOCATE(P1MEAN)
      IF(ALLOCATED(P2MEAN)) DEALLOCATE(P2MEAN)
      IF(ALLOCATED(SPRDMEAN)) DEALLOCATE(SPRDMEAN)
      IF(ALLOCATED(C3MEAN)) DEALLOCATE(C3MEAN)
      IF(ALLOCATED(C4MEAN)) DEALLOCATE(C4MEAN)
      IF(ALLOCATED(BFMEAN)) DEALLOCATE(BFMEAN)
      IF(ALLOCATED(QPMEAN)) DEALLOCATE(QPMEAN)
      IF(ALLOCATED(HMAXMEAN)) DEALLOCATE(HMAXMEAN)
      IF(ALLOCATED(TMAXMEAN)) DEALLOCATE(TMAXMEAN)
      IF(ALLOCATED(USTMEAN)) DEALLOCATE(USTMEAN)
      IF(ALLOCATED(VSTMEAN)) DEALLOCATE(VSTMEAN)
      IF(ALLOCATED(STRNMS)) DEALLOCATE(STRNMS)
      IF(ALLOCATED(E10MEAN)) DEALLOCATE(E10MEAN)
      IF(ALLOCATED(WEFLXM)) DEALLOCATE(WEFLXM)
      IF(ALLOCATED(WEFLXD)) DEALLOCATE(WEFLXD)
      IF(ALLOCATED(E1012)) DEALLOCATE(E1012)
      IF(ALLOCATED(E1214)) DEALLOCATE(E1214)
      IF(ALLOCATED(E1417)) DEALLOCATE(E1417)
      IF(ALLOCATED(E1721)) DEALLOCATE(E1721)
      IF(ALLOCATED(E2125)) DEALLOCATE(E2125)
      IF(ALLOCATED(E2530)) DEALLOCATE(E2530)
      IF(ALLOCATED(WX1)) DEALLOCATE(WX1)
      IF(ALLOCATED(WX2)) DEALLOCATE(WX2)
      IF(ALLOCATED(WX3)) DEALLOCATE(WX3)
      IF(ALLOCATED(WX4)) DEALLOCATE(WX4)
      IF(ALLOCATED(WX5)) DEALLOCATE(WX5)

      IF (ITEST.GE.3) THEN
        IF (ITESTB.GE.IG) THEN
          WRITE(IU06,*) '      SUB. OUTBS: DEALLOCATE OF ARRAYS FOR',
     &     ' INTEGRATED PARAMETERS DONE'
          CALL FLUSH(IU06)
        ENDIF
      ENDIF

!*    6. OUTPUT OF SPECTRA FOR SATELLITE COLLOCATION.
!        --------------------------------------------

      IF (MARSTYPE.EQ.'an'.OR.MARSTYPE.EQ.'fg'.OR.MARSTYPE.EQ.'4v') THEN
        IF (CDTPRO.NE.CDATEA) THEN
          CALL OUTERS (FL3, IJSLOC, IJLLOC, CDTPRO)
          IF (ITEST.GE.3) THEN
            IF (ITESTB.GE.IG) THEN
              WRITE(IU06,*) '      SUB. OUTBS: OUTPUT OF SPECTRA',
     &         ' FOR SATELLITE COLLOCATION DONE FOR ', CDTPRO
            ENDIF
          ENDIF
        ENDIF
      ENDIF

#ifdef ECMWF
      IF (LHOOK) CALL DR_HOOK('OUTBS',1,ZHOOK_HANDLE)
#endif

      END SUBROUTINE OUTBS
