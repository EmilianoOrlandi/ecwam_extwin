      SUBROUTINE MPDISTRIBINTFLD(ISEND,ITAG,NSTART,NEND,IFIELD)

! ----------------------------------------------------------------------

!****  *MPDISTRIBINTFLD* - DISTRIBUTE IFIELD ACROSS PROCESSORS 

!     J. BIDLOT    ECMWF   SEPTEMBER 1997 

!     PURPOSE.
!     --------
!     SEND THE RESPECTIVE CONTRIBUTION OF ARRAY IFIELD FROM PROCESSOR
!     ISEND TO THE OTHER PE's.

!*    INTERFACE.
!     ----------

!     CALL *MPDISTRIBFL*(ISEND,ITAG,NSTART,NEND,MI,MS,IFIELD) 

!     *ISEND*     RANK OF THE PROCESS ONTO WHICH IFIELD IS COLLECTED 
!     *ITAG*      TAG ASSOCIATED WITH AS A PARTICULAR CALL TO SUBROUTINE
!                 THIS IS NECESSARY TO DIFFERENTIATE THE DIFFERENT CALLS
!     *NSTART*    INDEX OF THE FIRST POINT OF THE SUB GRID DOMAIN
!     *NEND*      INDEX OF THE LAST POINT OF THE SUB GRID DOMAIN
!     *IFIELD*     INPUT/OUTPUT ARRAY

!     METHOD.
!     -------
!     MPL SEND OF ARRAY IFIELD FROM PROCESSOR CORRESPONDING TO ISEND TO 
!     ALL OTHER PROCESSORS.

!     EXTERNALS.
!     ----------
!     MPL PACKAGE :
!         MPL_SEND
!         MPL_RECV
!         MPL_ABORT 

!     REFERENCES.
!     -----------
!         NONE
! -------------------------------------------------------------------

      USE YOWMPP   , ONLY : IRANK    ,NPROC    ,MPMAXLENGTH
      USE YOWPARAM , ONLY : NIBLO
      USE MPL_MODULE

!----------------------------------------------------------------------
!     ALLOCATABLE ARRAYS THAT ARE PASSED AS SUBROUTINE ARGUMENTS

      INTEGER,DIMENSION(NPROC) :: NSTART,NEND
      INTEGER,DIMENSION(NIBLO) :: IFIELD
!----------------------------------------------------------------------

      INTEGER,DIMENSION(NPROC) :: ISENDREQ
      INTEGER,ALLOCATABLE :: ICOMBUFS(:,:)
      INTEGER,ALLOCATABLE :: ICOMBUFR(:)


      IF((ISEND.EQ.0).OR.(NPROC.EQ.1)) RETURN 

      IF(IRANK.EQ.ISEND) THEN
!     1.1 SEND NON BLOCKING TO ALL PROCESSORS
!         -----------------------------------
        MPLENGTH=MPMAXLENGTH
        ALLOCATE(ICOMBUFS(MPLENGTH,NPROC))

        DO IP=1,NPROC
          KCOUNT=0
          DO IJ=NSTART(IP),NEND(IP)
            KCOUNT=KCOUNT+1
            ICOMBUFS(KCOUNT,IP)=IFIELD(IJ)
          ENDDO
        ENDDO

        DO IP=1,NPROC
          CALL MPL_SEND(ICOMBUFS(1:MPLENGTH,IP),KDEST=IP,KTAG=ITAG,
     &     KMP_TYPE=JP_NON_BLOCKING_STANDARD,KREQUEST=ISENDREQ(IP),
     &     CDSTRING='MPDISTRIBINTFLD:')
        ENDDO

      ENDIF

!     1.2 RECEIVE CONTRIBUTION TO THE IFIELD FROM PE ISEND 
!         ------------------------------------------------ 

      MPLENGTH=MPMAXLENGTH
      ALLOCATE(ICOMBUFR(MPLENGTH))

      CALL MPL_RECV(ICOMBUFR(1:MPLENGTH),KSOURCE=ISEND,KTAG=ITAG,
     & KOUNT=KRCOUNT,KRECVTAG=KRTAG,CDSTRING='MPDISTRIBINTFLD:')
      IF(KRCOUNT.NE.MPLENGTH) CALL MPL_ABORT
     & ('MPL_RECV ERROR in MPDISTRIBINTFLD:MISMATCHED MSG LENGTH')
      IF(KRTAG.NE.ITAG) CALL MPL_ABORT
     & ('MPL_RECV ERROR in MPDISTRIBINTFLD MISMATCHED TAGS' )

      KCOUNT=0
      DO IJ=NSTART(IRANK),NEND(IRANK)
        KCOUNT=KCOUNT+1
        IFIELD(IJ)=ICOMBUFR(KCOUNT)
      ENDDO

      IF(IRANK.EQ.ISEND) THEN
        CALL MPL_WAIT(ICOMBUFS(1:MPLENGTH,1),KREQUEST=ISENDREQ,
     &                CDSTRING='MPDISTRIBINTFLD:')
        DEALLOCATE(ICOMBUFS)
      ENDIF

      DEALLOCATE(ICOMBUFR)

      RETURN
      END SUBROUTINE MPDISTRIBINTFLD
