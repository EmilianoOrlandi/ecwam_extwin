      SUBROUTINE MPDISTRIBFL(ISEND,ITAG,NSTART,NEND,MINF,MSUP,MI,MS,FL)

! ----------------------------------------------------------------------

!****  *MPDISTRIBFL* - DISTRIBUTE FL ACROSS PROCESSORS 

!     J. BIDLOT    ECMWF   SEPTEMBER 1997 

!     PURPOSE.
!     --------
!     SEND THEIR RESPECTIVE CONTRIBUTION OF ARRAY FL 
!     FROM PROCESSOR ISEND TO THE OTHER PE's.

!*    INTERFACE.
!     ----------

!     CALL *MPDISTRIBFL*(ISEND,ITAG,NSTART,NEND,MINF,MSUP,MI,MS,FL)

!     *ISEND*     RANK OF THE PROCESS ONTO WHICH FIELD IS COLLECTED 
!     *ITAG*      TAG ASSOCIATED WITH AS A PARTICULAR CALL TO SUBROUTINE
!                 THIS IS NECESSARY TO DIFFERENTIATE THE DIFFERENT CALLS 
!     *NSTART*    INDEX OF THE FIRST POINT OF THE SUB GRID DOMAIN
!     *NEND*      INDEX OF THE LAST POINT OF THE SUB GRID DOMAIN
!     *MINF*      INDEX OF THE FIRST FREQUENCY OF FL TO BE DISTRIBUTED
!     *MSUP*      INDEX OF THE LAST FREQUENCY OF FL TO BE DISTRIBUTED
!     *MI*        INDEX OF THE FIRST FREQUENCY OF FL
!     *MS*        INDEX OF THE LAST FREQUENCY OF FL
!     *FL*        INPUT/OUTPUT ARRAY CONTAINING THE PART OF THE SPECTRUM 

!     METHOD.
!     -------
!     MPE SEND OF ARRAY FL FROM PROCESSOR CORRESPONDING TO ISEND TO 
!     ALL OTHER PROCESSORS.

!     EXTERNALS.
!     ----------
!     MPE PACKAGE :
!         MPE_SEND
!         MPE_RECV
!         MPEI_ABORT 

!     REFERENCES.
!     -----------
!         NONE
! -------------------------------------------------------------------

      USE YOWMPP   , ONLY : IRANK    ,NPROC    ,MPMAXLENGTH
      USE YOWPARAM , ONLY : NANG     ,NIBLO

!----------------------------------------------------------------------
!     ALLOCATABLE ARRAYS THAT ARE PASSED AS SUBROUTINE ARGUMENTS

      INTEGER,DIMENSION(NPROC) :: NSTART,NEND
      REAL,DIMENSION(0:NIBLO,NANG,MI:MS) :: FL
!----------------------------------------------------------------------

      REAL,ALLOCATABLE :: ZCOMBUF(:)


      IF((ISEND.EQ.0).OR.(NPROC.EQ.1)) THEN
        RETURN
      ELSEIF(IRANK.EQ.ISEND) THEN
!     1.1 SEND TO ALL PROCESSORS OTHER THAN ISEND
!         ------------------------------------------------
        MPLENGTH=MPMAXLENGTH*NANG*(MSUP-MINF+1)
        ALLOCATE(ZCOMBUF(MPLENGTH))

        DO IP=1,ISEND-1
          KCOUNT=0
          DO M=MINF,MSUP
            DO K=1,NANG
              DO IJ=NSTART(IP),NEND(IP)
                KCOUNT=KCOUNT+1
                ZCOMBUF(KCOUNT)=FL(IJ,K,M)
              ENDDO
            ENDDO
          ENDDO
          CALL MPE_SEND(ZCOMBUF,MPLENGTH,2,IP,ITAG,0,0,0,IERR)
          IF(IERR.LT.0) CALL MPEI_ABORT
     &     ('MPE_SEND ERROR 1 in MPDISTRIBFL' )
        ENDDO

        DO IP=ISEND+1,NPROC
          KCOUNT=0
          DO M=MINF,MSUP
            DO K=1,NANG
              DO IJ=NSTART(IP),NEND(IP)
                KCOUNT=KCOUNT+1
                ZCOMBUF(KCOUNT)=FL(IJ,K,M)
              ENDDO
            ENDDO
          ENDDO
          CALL MPE_SEND(ZCOMBUF,MPLENGTH,2,IP,ITAG,0,0,0,IERR)
          IF(IERR.LT.0) CALL MPEI_ABORT
     &     ('MPE_SEND ERROR 2 in MPDISTRIBFL' )
        ENDDO

      ELSE

!     1.2 RECEIVE CONTRIBUTION TO THE FIELD FROM PE ISEND 
!         ------------------------------------------------ 

        MPLENGTH=MPMAXLENGTH*NANG*(MSUP-MINF+1)
        ALLOCATE(ZCOMBUF(MPLENGTH))

        CALL MPE_RECV(ZCOMBUF,MPLENGTH,2,ISEND,ITAG,0,0,0,
     &   KRCOUNT,KRFROM,KRTAG,IERR)
        IF(IERR.LT.0) CALL MPEI_ABORT
     &   ('MPE_RECV ERROR in MPDISTRIBFL' )
        IF(KRCOUNT.NE.MPLENGTH) CALL MPEI_ABORT
     &   ('MPE_RECV ERROR in MPDISTRIBFL:MISMATCHED MESSAGE LENGTH')
        IF(KRTAG.NE.ITAG) CALL MPEI_ABORT
     &   ('MPE_RECV ERROR in MPDISTRIBFL MISMATCHED TAGS' )

        KCOUNT=0
        DO M=MINF,MSUP
          DO K=1,NANG
            DO IJ=NSTART(IRANK),NEND(IRANK)
              KCOUNT=KCOUNT+1
              FL(IJ,K,M)=ZCOMBUF(KCOUNT)
            ENDDO
          ENDDO 
        ENDDO 

      ENDIF

      DEALLOCATE(ZCOMBUF)

      RETURN
      END SUBROUTINE MPDISTRIBFL
