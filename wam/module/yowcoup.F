      MODULE YOWCOUP

      USE YOWNEMOP

      IMPLICIT NONE

!*    ** *COUPL* - PARAMETERS FOR COUPLING.

      INTEGER, PARAMETER :: JPLEVC=1
      LOGICAL LWCOU
      LOGICAL :: LWNEMOCOU=.FALSE.
      LOGICAL LWNEMOCOUSEND
      LOGICAL LWNEMOTAUOC
      LOGICAL LWNEMOCOUSTRN
      LOGICAL LWNEMOCOURECV
      LOGICAL LWNEMOCOUCIC
      LOGICAL LWNEMOCOUCIT
      LOGICAL LWNEMOCOUCUR
      LOGICAL LWNEMOCOUSTK
      LOGICAL LWNEMOCOUDEBUG
      LOGICAL LWCOU2W
      LOGICAL LWFLUX
      LOGICAL LWVFLX_SNL
      LOGICAL LWCOUNORMS
      LOGICAL LMASK_OUT_NOT_SET
      LOGICAL LMASK_TASK_STR
      INTEGER KCOUSTEP
      INTEGER, ALLOCATABLE :: LFROMTASK(:), LTOTASK(:)
      INTEGER, ALLOCATABLE :: IJFROMTASK(:), IJTOTASK(:)
      INTEGER, ALLOCATABLE :: ISTFROMTASK(:), ISTTOTASK(:)
      INTEGER :: NFROMTASKS, NTOTASKS
      INTEGER, ALLOCATABLE :: I_MASK_IN(:)
      INTEGER :: N_MASK_IN
      INTEGER, ALLOCATABLE :: I_MASK_OUT(:), J_MASK_OUT(:)
      INTEGER :: N_MASK_OUT

      REAL :: BETAMAX
      REAL :: ZALP
      REAL :: ALPHA
      REAL :: TAUWSHELTER
      INTEGER :: ITSHELT
      REAL :: TAILFACTOR
      REAL :: TAILFACTOR_PM
      REAL :: XKAPPA
      REAL :: XNLEV(JPLEVC)

      INTEGER, PARAMETER :: JTOT_TAUHF=19  ! must be odd !!! 
      REAL :: WTAUHF(JTOT_TAUHF)
      REAL :: X0TAUHF

      REAL(NEMODP), ALLOCATABLE :: NEMOTAUX(:), NEMOTAUY(:)
      REAL(NEMODP), ALLOCATABLE :: NEMONEW10(:), NEMOPHIF(:)
      INTEGER :: NEMONTAU

      INTEGER :: NEMOINIDATE
      INTEGER :: NEMOINITIME
      INTEGER :: NEMOITINI
      INTEGER :: NEMOITEND
      REAL(NEMODP) :: NEMOTSTEP
      INTEGER :: NEMOFRCO
      INTEGER :: NEMONSTEP
      INTEGER :: NEMOCSTEP
      INTEGER :: NEMOWSTEP

!*     VARIABLE.   TYPE.     PURPOSE.
!      ---------   -------   --------
!      *JPLEVC*    INTEGER   NUMBER OF REFERENCE LEVEL FOR WINDS.
!      *LWCOU*     LOGICAL   CONTROLS COUPLING WITH ATMOSPHERIC MODEL
!      *LWNEMOCOUSEND* L     SENDS DATA TO THE NEMO MODEL.
!      *LWNEMOCOUSTK LOGI.   SEND SURFACE STOKES DRIFT TO NEMO
!      *LWNEMOCOUSTRN LOGI.  SEND ICE WAVE STRAIN TO NEMO
!      *LWNEMOCOURECV* L     RECV DATA FROM THE NEMO MODEL.
!      *LWNEMOCOU* LOGICAL   CONTROLS COUPLING WITH NEMO OCEAN MODEL
!      *LWNEMOCOUDEBUG* LO   EXTRA NETCDF DEBUGGING OUTPUT FOR NEMO COUPLING
!      *LWNEMOTAUOC* LO      USE TAUOC OR FULL TAU FOR SENDING TO NEMO
!      *LWNEMOCOUCIC LOGI.   USE THE ICE CONCENTRATION FROM NEMO
!      *LWNEMOCOUCIT LOGI.   USE THE ICE THICKNESS FROM NEMO
!      *LWNEMOCOUCUR LOGI.   USE THE OCEAN CURRENTS FROM NEMO
!      *LWCOU2W*   LOGICAL   CONTROLS 1-WAY OR 2-WAY COUPLING
!      *LWFLUX*    LOGICAL   IF TRUE FLUXES FOR OCEAN MODEL ARE PRODUCED
!                            FOR THE IFS.
!      *LWVFLX_SNL LOGICAL   IF TRUE FLUXES FOR OCEAN MODEL ARE PRODUCED
!                            WITh THE NONLINEAR SOURCE TERM CONTRIBUTION
!      *LWCOUNORMS*LOGICAL   CONTROLS COMPUTING/PRINTING OF NORMS OF FIELDS
!                            FROM/TO THE ATMOS MODEL
!      *LMASK_OUT_NOT_SET    INDICATES IF THE MASK USED FOR FIELDS RETURNED
!                            TO IFS IS UNSET OR NOT. 
!      *LMASK_TASK_STR* LOGICAL TRUE UNTIL THE TASK STRUCTURE CORRESPONDING
!                            TO MASK_OUT IS DETERMINED.
!      *KCOUSTEP*  INTEGER   COUPLING TIME TO THE IFS (in seconds).
!      *LFROMTASK* INTEGER   CONTROLS WHICH WAM TASKS CONTRIBUTE TO THE FIELDS
!                            RETURNED TO THE IFS FROM CURRENT TASK
!                            BY SPECIFYING THE NUMBER OF SEA POINTS THAT
!                            CONTRIBUTES TO THE FIELDS
!      *LTOTASK*   INTEGER   CONTROLS WHICH WAM TASKS NEED TO RECEIVE
!                            CONTRIBUTIONS TO THE FIELDS RETURNED TO IFS
!                            FROM CURRENT WAM TASK BY SPECIFYING
!                            THE NUMBER OF SEA POINTS THAT ARE NEEDED.
!      *IJFROMTASK*INTEGER   GIVES THE (global) IJ INDEX FOR EACH SEA POINT
!                            REFERRED TO BY LFROMTASK.
!                            SIZE IS GIVEN BY NFROMTASKS
!      *IJTOTASK*  INTEGER   GIVES THE (global) IJ INDEX FOR EACH SEA POINT
!                            REFERRED TO BY LTOTASK
!                            SIZE IS GIVEN BY NTOTASKS.
!      *ISTFROMTASK*INTEGER  GIVES THE STARTNG INDEX IN IJFROMTASK FOR ALL
!                            IJ's THAT ARE FROM EACH TASK (if any).
!      *ISTTOTASK*  INTEGER  GIVES THE STARTNG INDEX IN IJTOTASK FOR ALL
!                            IJ's THAT ARE TO BE SENT FROM EACh TASK (if any).
!      *NFROMTASKS*INTEGER   SUM OF LFROMTASKS ON EACH TASK.
!      *NTOTASKS*  INTEGER   SUM OF LTOTASKS ON EACH TASK.
!      *I_MASK_IN* INTEGER   LIST OF I INDEX OF MASK_IN THAT ARE LOCAL TO TASK
!      *N_MASK_IN* INTEGER   MAXIMUM SIZE OF I_MASK_IN
!      *I_MASK_OUT*INTEGER   LIST OF I INDEX OF MASK_OUT THAT ARE LOCAL TO TASK
!      *J_MASK_OUT*INTEGER   LIST OF J INDEX OF MASK_OUT THAT ARE LOCAL TO TASK
!      *N_MASK_OUT*INTEGER   MAXIMUM SIZE OF I_MASK_OUT AND J_MASK_OUT 
!      *BETAMAX*   REAL      PARAMETER FOR WIND INPUT.
!      *ZALP*      REAL      SHIFTS GROWTH CURVE.
!      *TAUWSHELTER* REAL    SHELTERING COEFFICIENT in METEO FRANCE PHYSICS
!      *ITSHELT*   INTEGER   =0 IF TAUWSHELTER<=0.0 ELSE =1
!      COMPUTE LAST FREQUENCY INDEX OF PROGNOSTIC PART OF SPECTRUM.
!      FREQUENCIES LE MAX(TAILFACTOR*MAX(FMNWS,FM),TAILFACTOR_PM*FPM),
!      WHERE FPM IS THE PIERSON-MOSKOWITZ FREQUENCY BASED ON FRICTION
!      VELOCITY. (FPM=G/(FRIC*ZPI*USTAR))
!      *ALPHA*     REAL      MINIMUM CHARNOCK CONSTANT WITH NO WAVES.
!      *XKAPPA*    REAL      VON KARMAN CONSTANT.
!      *XNLEV*     REAL      WIND SPEED REFERENCE HEIGHT

!      *JTOT_TAUHF INTEGER   DIMENSION OF WTAUHF. IT MUST BE ODD !!! 
!      *WTAUHF*    REAL      INTEGRATION WEIGHT FOR TAU_PHI_HF
!      *X0TAUHF*   REAL      LOWEST LIMIT FOR INTEGRATION IN TAU_PHI_HF: X0 *(G/USTAR)
!
!      *NEMOTAUX*  REAL      NEMO U OCEAN STRESS
!      *NEMOTAUY*  REAL      NEMO V OCEAN STRESS
!      *NEMONEW10* REAL      NEMO NEUTRAL 10M WIND
!      *NEMOPHIF*  REAL      FULL PHI INTO THE OCEAN
!      *NEMONTAU*  INTEGER   ACCUMULATION 
!
!      
!      *NEMOINIDATE* INTEGER NEMO INITIAL DATE
!      *NEMOINITIME* INTEGER NEMO INITIAL TIME
!      *NEMOITINI*   INTEGER NEMO INITIAL TIME STEP
!      *NEMOITEND*   INTEGER NEMO FINAL TIME STEP
!      *NEMOTSTEP*   REAL    NEMO TIMESTEP
!      *NEMOFRCO*    INTEGER NEMO COUPLING FREQ IN WAM TIME STEPS
!      *NEMONSTEP*   INTEGER NEMO COUPLING FREQ IN NEMO TIME STEPS
!      *NEMOCSTEP*   INTEGER NEMO CURRENT TIME STEP
!      *NEMOWSTEP*   INTEGER WAM  CURRENT TIME STEP

! ----------------------------------------------------------------------
      END MODULE YOWCOUP
